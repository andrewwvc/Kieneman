#0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "KIENEMAN"))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|IA-SLOT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|KIENEMAN|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|IEA-SLOT|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|KIENEMAN|::|FORM|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|DEFCLASS+|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|DEFCLASS+|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|DEFCLASS+|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|SUPERS| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|SLOTS| (|COMMON-LISP|::|CADDDR| . #1#))
       (|KIENEMAN|::|META| (|COMMON-LISP|::|CDDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|DEFCLASS+|
       (|COMMON-LISP|::|LET|
        ((|KIENEMAN|::|FINAL-SLOTS|
          (|KIENEMAN|::|MAP-BY-CAR| (|FFI|::|SLOT| |KIENEMAN|::|SLOTS|)
           (:|IA| (|KIENEMAN|::|IA-SLOT| (|COMMON-LISP|::|CDR| |FFI|::|SLOT|)))
           (:|IEA|
            (|KIENEMAN|::|IEA-SLOT| (|COMMON-LISP|::|CDR| |FFI|::|SLOT|))))))
        `(|COMMON-LISP|::|PROGN|
          (|KIENEMAN|::|EVAL-ALWAYS|
           (|COMMON-LISP|::|SETF|
            (|COMMON-LISP|::|GET| ',|KIENEMAN|::|NAME| '|KIENEMAN|::|SLOTS|)
            ',(|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|FIRST|
               |KIENEMAN|::|FINAL-SLOTS|))
           (|COMMON-LISP|::|SETF|
            (|COMMON-LISP|::|GET| ',|KIENEMAN|::|NAME| '|KIENEMAN|::|SUPERS|)
            ',|KIENEMAN|::|SUPERS|))
          (|CLOS|::|DEFCLASS| ,|KIENEMAN|::|NAME| ,|KIENEMAN|::|SUPERS|
           ,|KIENEMAN|::|FINAL-SLOTS| ,@|KIENEMAN|::|META|))))))))
  '(|KIENEMAN|::|NAME| |KIENEMAN|::|SUPERS| |KIENEMAN|::|SLOTS|
    |COMMON-LISP|::|&REST| |KIENEMAN|::|META|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|CLASS-SLOT-NAMES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|CLASS-NAME|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|DEFDELEGATE|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|DEFDELEGATE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|DEFDELEGATE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Accepts a class name (parent) an accesable member of 
the class (delegate) and a list of methods which are
to be called on the delegate member when they are called on
the parent class.

Each method must either consist solely of it's name (in which
case the functions has an argument of the single delegate) or be
a list with its name at the front and with all arguments apart
from the first as the cdr.

NOTE: This is not to be confused with the member function
style delegate concept of other languages."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 4.
       4.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|PARENT|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|DELEGATE| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|METHODS| (|COMMON-LISP|::|CADDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|DEFDELEGATE|
       `(|COMMON-LISP|::|PROGN|
         ,@(|COMMON-LISP|::|MAPCAR|
            #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|METHOD|)
               (|COMMON-LISP|::|LET|
                ((|CLOS|::|METHOD|
                  (|COMMON-LISP|::|IF|
                   (|COMMON-LISP|::|LISTP| |CLOS|::|METHOD|)
                   (|COMMON-LISP|::|CAR| |CLOS|::|METHOD|) |CLOS|::|METHOD|))
                 (|KIENEMAN|::|ARGS|
                  (|COMMON-LISP|::|IF|
                   (|COMMON-LISP|::|LISTP| |CLOS|::|METHOD|)
                   (|COMMON-LISP|::|CDR| |CLOS|::|METHOD|)
                   |COMMON-LISP|::|NIL|)))
                `(|CLOS|::|DEFMETHOD| ,|CLOS|::|METHOD|
                  ((,|KIENEMAN|::|PARENT| ,|KIENEMAN|::|PARENT|)
                   ,@|KIENEMAN|::|ARGS|)
                  (,|CLOS|::|METHOD|
                   (,|KIENEMAN|::|DELEGATE| ,|KIENEMAN|::|PARENT|)
                   ,@|KIENEMAN|::|ARGS|))))
            |KIENEMAN|::|METHODS|)))))))
  '(|KIENEMAN|::|PARENT| |KIENEMAN|::|DELEGATE| |KIENEMAN|::|METHODS|)))
