#0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "KIENEMAN"))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|Î»|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|Î»|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|Î»|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Lambda Literal: Constructs a lambda form with no args"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT| (|EXT|::|PROPER-LIST-P| |SYSTEM|::|<MACRO-FORM>|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|FORMS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|Î»|
       `#'(|COMMON-LISP|::|LAMBDA| |COMMON-LISP|::|NIL|
           ,@|KIENEMAN|::|FORMS|))))))
  '(|COMMON-LISP|::|&REST| |KIENEMAN|::|FORMS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|Î»X|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|Î»X|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|Î»X|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Lambda literal with x: Constructs a lambda form with x as an arg"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT| (|EXT|::|PROPER-LIST-P| |SYSTEM|::|<MACRO-FORM>|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|FORMS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|Î»X|
       `#'(|COMMON-LISP|::|LAMBDA| (|KIENEMAN|::|X|)
           ,@|KIENEMAN|::|FORMS|))))))
  '(|COMMON-LISP|::|&REST| |KIENEMAN|::|FORMS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|ABBREV|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|ABBREV|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|ABBREV|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.
       3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|FFI|::|SHORT| (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|FFI|::|LONG| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|ABBREV|
       `(|COMMON-LISP|::|DEFMACRO| ,|FFI|::|SHORT|
         (|COMMON-LISP|::|&REST| |KIENEMAN|::|ARGS|)
         `(,',|FFI|::|LONG| ,@|KIENEMAN|::|ARGS|)))))))
  '(|FFI|::|SHORT| |FFI|::|LONG|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|MAP-BY-CAR|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|MAP-BY-CAR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|MAP-BY-CAR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Expands to a form which accepts a list of elements, each of which
must be a list (car must be a valid operator on each element). After a two element
form containing the names of the list and the alias each individual element
is to be refered to, the body of the main form must contain a list of cases,
each consisting of a form who's car must be a value which is to
be tested against the car of each list element and who's cdar must be a form which
when evaluates to the value the list element is to be replaced by.
The value returned by the evaluation of the form is the list passed in via 
list name, except that each element who's car matches (is eql to) the car
of one of the cases in the body will be replaced by the result of evaluating
the second atom of the case form."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((#1=#:|G5496| (|COMMON-LISP|::|CADR| . #2=(|SYSTEM|::|<MACRO-FORM>|)))
       (#3=#:|G5497|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| #1# 2. 2.))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #1#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|KIENEMAN|::|MAP-BY-CAR| #1#
          '#4=(|FFI|::|ELEMENT| |KIENEMAN|::|LIST-NAME|))
         #1#))
       (|FFI|::|ELEMENT| (|COMMON-LISP|::|CAR| #3#))
       (|KIENEMAN|::|LIST-NAME| (|COMMON-LISP|::|CADR| #3#))
       (|KIENEMAN|::|CASES| (|COMMON-LISP|::|CDDR| . #2#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|MAP-BY-CAR|
       `(|COMMON-LISP|::|MAPCAR|
         #'(|COMMON-LISP|::|LAMBDA| (,|FFI|::|ELEMENT|)
            (|COMMON-LISP|::|CASE| (|COMMON-LISP|::|CAR| ,|FFI|::|ELEMENT|)
             ,@|KIENEMAN|::|CASES|
             (|COMMON-LISP|::|OTHERWISE| ,|FFI|::|ELEMENT|)))
         ,|KIENEMAN|::|LIST-NAME|))))))
  '(#4# |COMMON-LISP|::|&BODY| |KIENEMAN|::|CASES|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|VAR|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|VAR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|VAR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "A form for when you simply want to 'let' a single variable.
i.e. (var x 10 (var y 20 (+ x y))) evaluates to 30."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|VARIABLE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|VALUE-FORM| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|BODY| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|VAR|
       `(|COMMON-LISP|::|LET|
         ((,|COMMON-LISP|::|VARIABLE| ,|KIENEMAN|::|VALUE-FORM|))
         ,@|KIENEMAN|::|BODY|))))))
  '(|COMMON-LISP|::|VARIABLE| |KIENEMAN|::|VALUE-FORM| |COMMON-LISP|::|&REST|
    |KIENEMAN|::|BODY|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|MARG|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|KIENEMAN|::|FUNC| |KIENEMAN|::|ARGS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|MOR|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|MOR|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|MOR|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Expands to multiple calls of a function
each onto an individual list of arguments. The 
return values of these function calls are ored"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|FUNC|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|ARGS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|MOR|
       `(|COMMON-LISP|::|OR|
         ,@(|KIENEMAN|::|MARG| |KIENEMAN|::|FUNC| |KIENEMAN|::|ARGS|)))))))
  '(|KIENEMAN|::|FUNC| |COMMON-LISP|::|&REST| |KIENEMAN|::|ARGS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|MAND|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|MAND|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|MAND|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Expands to multiple calls of a function
each onto an individual list of arguments. The 
return values of these function calls are anded"
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|FUNC|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|ARGS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|MAND|
       `(|COMMON-LISP|::|AND|
         ,@(|KIENEMAN|::|MARG| |KIENEMAN|::|FUNC| |KIENEMAN|::|ARGS|)))))))
  '(|KIENEMAN|::|FUNC| |COMMON-LISP|::|&REST| |KIENEMAN|::|ARGS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|CCNM|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|CCNM|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|CCNM|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Calls the next method in the applicable method combination if it exists."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT| (|EXT|::|PROPER-LIST-P| |SYSTEM|::|<MACRO-FORM>|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|ARGS| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|CCNM|
       (|COMMON-LISP|::|IF| |KIENEMAN|::|ARGS|
        `(|COMMON-LISP|::|IF| (|CLOS|::|NEXT-METHOD-P|)
          (|CLOS|::|CALL-NEXT-METHOD| ,@|KIENEMAN|::|ARGS|))
        `(|COMMON-LISP|::|IF| (|CLOS|::|NEXT-METHOD-P|)
          (|CLOS|::|CALL-NEXT-METHOD|))))))))
  '(|COMMON-LISP|::|&REST| |KIENEMAN|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|DIFF|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|KIENEMAN|::|A| |KIENEMAN|::|B|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|MAPRATIO|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|KIENEMAN|::|VLIST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|INCF-TO|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|INCF-TO|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|INCF-TO|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|PLACE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|LIMIT| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|DELTA|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDDR| . #1#)
         (|COMMON-LISP|::|CADDDR| . #1#) 1.))
       (#2=#:|G5604| (|COMMON-LISP|::|CDDDDR| . #1#))
       (|KIENEMAN|::|FORCE-TO-LIMIT|
        (|COMMON-LISP|::|GETF| #2# ':|FORCE-TO-LIMIT| |COMMON-LISP|::|NIL|)))
      (|SYSTEM|::|KEYWORD-TEST| #2# '(:|FORCE-TO-LIMIT|))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|INCF-TO|
       (|COMMON-LISP|::|LET|
        ((|KIENEMAN|::|LIM| (|COMMON-LISP|::|GENSYM|))
         (|KIENEMAN|::|DEL| (|COMMON-LISP|::|GENSYM|)))
        `(|COMMON-LISP|::|LET|
          ((,|KIENEMAN|::|LIM| ,|KIENEMAN|::|LIMIT|)
           (,|KIENEMAN|::|DEL| ,|KIENEMAN|::|DELTA|))
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|<| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIM|)
           (|COMMON-LISP|::|PROGN|
            (|COMMON-LISP|::|INCF| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|DEL|)
            (|COMMON-LISP|::|WHEN|
             (|COMMON-LISP|::|>| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIM|)
             (|COMMON-LISP|::|SETF| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIM|)))
           ,@(|COMMON-LISP|::|IF| |KIENEMAN|::|FORCE-TO-LIMIT|
              `((|COMMON-LISP|::|SETF| ,|KIENEMAN|::|PLACE|
                 ,|KIENEMAN|::|LIM|))
              '|COMMON-LISP|::|NIL|))
          ,|KIENEMAN|::|PLACE|)))))))
  '(|KIENEMAN|::|PLACE| |KIENEMAN|::|LIMIT| |COMMON-LISP|::|&OPTIONAL|
    (|KIENEMAN|::|DELTA| 1.) |COMMON-LISP|::|&KEY|
    |KIENEMAN|::|FORCE-TO-LIMIT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|DECF-TO|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|DECF-TO|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|DECF-TO|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|PLACE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|LIMIT| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|DELTA|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDDR| . #1#)
         (|COMMON-LISP|::|CADDDR| . #1#) 1.))
       (#2=#:|G5620| (|COMMON-LISP|::|CDDDDR| . #1#))
       (|KIENEMAN|::|FORCE-TO-LIMIT|
        (|COMMON-LISP|::|GETF| #2# ':|FORCE-TO-LIMIT| |COMMON-LISP|::|NIL|)))
      (|SYSTEM|::|KEYWORD-TEST| #2# '(:|FORCE-TO-LIMIT|))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|DECF-TO|
       (|COMMON-LISP|::|LET|
        ((|KIENEMAN|::|LIM| (|COMMON-LISP|::|GENSYM|))
         (|KIENEMAN|::|DEL| (|COMMON-LISP|::|GENSYM|)))
        `(|COMMON-LISP|::|LET|
          ((,|KIENEMAN|::|LIM| ,|KIENEMAN|::|LIMIT|)
           (,|KIENEMAN|::|DEL| ,|KIENEMAN|::|DELTA|))
          (|COMMON-LISP|::|IF|
           (|COMMON-LISP|::|>| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIM|)
           (|COMMON-LISP|::|PROGN|
            (|COMMON-LISP|::|DECF| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|DEL|)
            (|COMMON-LISP|::|WHEN|
             (|COMMON-LISP|::|<| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIM|)
             (|COMMON-LISP|::|SETF| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIM|)))
           ,@(|COMMON-LISP|::|IF| |KIENEMAN|::|FORCE-TO-LIMIT|
              `((|COMMON-LISP|::|SETF| ,|KIENEMAN|::|PLACE|
                 ,|KIENEMAN|::|LIM|))
              '|COMMON-LISP|::|NIL|))
          ,|KIENEMAN|::|PLACE|)))))))
  '(|KIENEMAN|::|PLACE| |KIENEMAN|::|LIMIT| |COMMON-LISP|::|&OPTIONAL|
    (|KIENEMAN|::|DELTA| 1.) |COMMON-LISP|::|&KEY|
    |KIENEMAN|::|FORCE-TO-LIMIT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|CF-TO|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|CF-TO|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|CF-TO|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|PLACE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|LIMIT| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|DELTA|
        (|COMMON-LISP|::|IF| (|COMMON-LISP|::|CDDDR| . #1#)
         (|COMMON-LISP|::|CADDDR| . #1#) 1.))
       (#2=#:|G5636| (|COMMON-LISP|::|CDDDDR| . #1#))
       (|KIENEMAN|::|FORCE-TO-LIMIT|
        (|COMMON-LISP|::|GETF| #2# ':|FORCE-TO-LIMIT| |COMMON-LISP|::|NIL|)))
      (|SYSTEM|::|KEYWORD-TEST| #2# '(:|FORCE-TO-LIMIT|))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|CF-TO|
       `(|COMMON-LISP|::|IF| (|COMMON-LISP|::|>=| ,|KIENEMAN|::|DELTA| 0.)
         (|KIENEMAN|::|INCF-TO| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIMIT|
          ,|KIENEMAN|::|DELTA| :|FORCE-TO-LIMIT| ,|KIENEMAN|::|FORCE-TO-LIMIT|)
         (|KIENEMAN|::|DECF-TO| ,|KIENEMAN|::|PLACE| ,|KIENEMAN|::|LIMIT|
          (|COMMON-LISP|::|-| ,|KIENEMAN|::|DELTA|) :|FORCE-TO-LIMIT|
          ,|KIENEMAN|::|FORCE-TO-LIMIT|)))))))
  '(|KIENEMAN|::|PLACE| |KIENEMAN|::|LIMIT| |COMMON-LISP|::|&OPTIONAL|
    (|KIENEMAN|::|DELTA| 1.) |COMMON-LISP|::|&KEY|
    |KIENEMAN|::|FORCE-TO-LIMIT|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|DEF-CALL-OUT+|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|DEF-CALL-OUT+|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|DEF-CALL-OUT+|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Creates a generic function and method so that
a CLISP ffi callout can be used with polymorphism."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|FORMS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|DEF-CALL-OUT+|
       (|COMMON-LISP|::|LET|
        ((|KIENEMAN|::|ARG-LIST|
          (|COMMON-LISP|::|MAPCAR|
           #'(|COMMON-LISP|::|LAMBDA| (|KIENEMAN|::|ARG|)
              (|COMMON-LISP|::|CAR| |KIENEMAN|::|ARG|))
           (|COMMON-LISP|::|CDAR|
            (|COMMON-LISP|::|REMOVE-IF-NOT|
             #'(|COMMON-LISP|::|LAMBDA| (|KIENEMAN|::|FORM|)
                (|COMMON-LISP|::|EQUAL|
                 (|COMMON-LISP|::|CAR| |KIENEMAN|::|FORM|) :|ARGUMENTS|))
             |KIENEMAN|::|FORMS|))))
         (|KIENEMAN|::|-NAME|
          (|COMMON-LISP|::|INTERN|
           (|COMMON-LISP|::|CONCATENATE| '|COMMON-LISP|::|STRING| "-"
            (|COMMON-LISP|::|STRING| |KIENEMAN|::|NAME|)))))
        `(|COMMON-LISP|::|PROGN|
          (|FFI|::|DEF-CALL-OUT| ,|KIENEMAN|::|-NAME| ,@|KIENEMAN|::|FORMS|)
          (|CLOS|::|DEFGENERIC| ,|KIENEMAN|::|NAME| ,|KIENEMAN|::|ARG-LIST|)
          (|CLOS|::|DEFMETHOD| ,|KIENEMAN|::|NAME| ,|KIENEMAN|::|ARG-LIST|
           (,|KIENEMAN|::|-NAME| ,@|KIENEMAN|::|ARG-LIST|)))))))))
  '(|KIENEMAN|::|NAME| |COMMON-LISP|::|&BODY| |KIENEMAN|::|FORMS|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|PREMUTATIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|LIST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|DEFPREMETHOD|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|DEFPREMETHOD|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|DEFPREMETHOD|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Defines a series of methods, each of which contain a diffrent
premutations of all the possible orders of the arguments."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|NAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|ARGS| (|COMMON-LISP|::|CADDR| . #1#))
       (|KIENEMAN|::|BODY| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|DEFPREMETHOD|
       `(|COMMON-LISP|::|PROGN|
         (|CLOS|::|DEFMETHOD| ,|KIENEMAN|::|NAME| ,|KIENEMAN|::|ARGS|
          ,@|KIENEMAN|::|BODY|)
         (|CLOS|::|DEFMETHOD| ,|KIENEMAN|::|NAME|
          (,(|COMMON-LISP|::|CADR| |KIENEMAN|::|ARGS|)
           ,(|COMMON-LISP|::|CAR| |KIENEMAN|::|ARGS|))
          ,@|KIENEMAN|::|BODY|)))))))
  '(|KIENEMAN|::|NAME| |KIENEMAN|::|ARGS| |COMMON-LISP|::|&BODY|
    |KIENEMAN|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|HASH|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|HASH|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|HASH|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Cosntructs a hash table and accepts key value pairs."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT| (|EXT|::|PROPER-LIST-P| |SYSTEM|::|<MACRO-FORM>|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|REST| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|HASH|
       (|COMMON-LISP|::|LET|
        ((|KIENEMAN|::|HNAME| (|COMMON-LISP|::|GENSYM|))
         (|KIENEMAN|::|PAIRS| |COMMON-LISP|::|NIL|))
        (|COMMON-LISP|::|DOLIST| (|KIENEMAN|::|I| |COMMON-LISP|::|REST|)
         (|COMMON-LISP|::|PUSH|
          `(|COMMON-LISP|::|SETF|
            (|COMMON-LISP|::|GETHASH| ,(|COMMON-LISP|::|CAR| |KIENEMAN|::|I|)
             ,|KIENEMAN|::|HNAME|)
            ,(|COMMON-LISP|::|CADR| |KIENEMAN|::|I|))
          |KIENEMAN|::|PAIRS|))
        `(|COMMON-LISP|::|LET|
          ((,|KIENEMAN|::|HNAME| (|COMMON-LISP|::|MAKE-HASH-TABLE|)))
          ,@|KIENEMAN|::|PAIRS| ,|KIENEMAN|::|HNAME|)))))))
  '(|COMMON-LISP|::|&REST| |COMMON-LISP|::|REST|)))
(|SYSTEM|::|C-DEFUN| '|KIENEMAN|::|HASH-M|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|&REST| |KIENEMAN|::|PAIRS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|EVAL-ALWAYS|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|EVAL-ALWAYS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|EVAL-ALWAYS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Makes sure that the body forms are always evaluated,
regardless of whether they are being compiled, loaded or executed."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT| (|EXT|::|PROPER-LIST-P| |SYSTEM|::|<MACRO-FORM>|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|BODY| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|EVAL-ALWAYS|
       `(|COMMON-LISP|::|EVAL-WHEN|
         (:|COMPILE-TOPLEVEL| :|LOAD-TOPLEVEL| :|EXECUTE|)
         ,@|KIENEMAN|::|BODY|))))))
  '(|COMMON-LISP|::|&BODY| |KIENEMAN|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|PRINT-EXPANSION-1|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|PRINT-EXPANSION-1|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|PRINT-EXPANSION-1|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "Prints the level 1 macro expansion of a form at compile time."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.
       3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|ENV| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|PRINT-EXPANSION-1|
       (|COMMON-LISP|::|FORMAT| |COMMON-LISP|::|T| "~&*****~&~a~&*****~&"
        (|COMMON-LISP|::|MACROEXPAND-1| |KIENEMAN|::|FORM| |KIENEMAN|::|ENV|))
       |KIENEMAN|::|FORM|)))))
  '(|KIENEMAN|::|FORM| |COMMON-LISP|::|&OPTIONAL| |KIENEMAN|::|ENV|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|APPENDING-COND|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|APPENDING-COND|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|APPENDING-COND|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT| (|EXT|::|PROPER-LIST-P| |SYSTEM|::|<MACRO-FORM>|))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|BODY| (|COMMON-LISP|::|CDR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|APPENDING-COND|
       `(|COMMON-LISP|::|COND|
         ,@(|COMMON-LISP|::|APPLY| #'|COMMON-LISP|::|APPEND|
            (|COMMON-LISP|::|MAPCAR|
             #'(|COMMON-LISP|::|LAMBDA| (|KIENEMAN|::|FRM|)
                (|COMMON-LISP|::|IF|
                 (|COMMON-LISP|::|SYMBOLP|
                  (|COMMON-LISP|::|FIRST| |KIENEMAN|::|FRM|))
                 (|COMMON-LISP|::|MACROEXPAND-1| |KIENEMAN|::|FRM|)
                 |KIENEMAN|::|FRM|))
             |KIENEMAN|::|BODY|))))))))
  '(|COMMON-LISP|::|&BODY| |KIENEMAN|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|KIENEMAN|::|LCASE|)
(|SYSTEM|::|%PUTD| '|KIENEMAN|::|LCASE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |KIENEMAN|::|LCASE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|KIENEMAN|::|E-FORM|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|KIENEMAN|::|FORMS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |KIENEMAN|::|LCASE|
       `(|COMMON-LISP|::|COND|
         ,@(|COMMON-LISP|::|MAPCAR|
            #'(|COMMON-LISP|::|LAMBDA| (|KIENEMAN|::|F|)
               (|COMMON-LISP|::|DESTRUCTURING-BIND|
                (|KIENEMAN|::|TEST-VAL| |COMMON-LISP|::|&REST|
                 |KIENEMAN|::|BODY|)
                |KIENEMAN|::|F|
                `((|COMMON-LISP|::|EQUAL| ,|KIENEMAN|::|E-FORM|
                   ,|KIENEMAN|::|TEST-VAL|)
                  ,@|KIENEMAN|::|BODY|)))
            |KIENEMAN|::|FORMS|)))))))
  '(|KIENEMAN|::|E-FORM| |COMMON-LISP|::|&BODY| |KIENEMAN|::|FORMS|)))
